generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(uuid())
  email                String            @unique
  password             String
  firstName            String?
  lastName             String?
  profileImageUrl      String?
  theme                String?           @default("light")
  notificationsEnabled Boolean           @default(true)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  events               Event[]
  maintenanceTasks     MaintenanceTask[]
  mealPlans            MealPlan[]
  plants               Plant[]
  recipes              Recipe[]
  tasks                Task[]
  weatherLocations     WeatherLocation[]
}

model Event {
  id           String   @id @default(uuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  allDay       Boolean  @default(false)
  location     String?
  category     String?
  color        String?
  isRecurring  Boolean  @default(false)
  recurrence   Json?
  reminderTime Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  completedAt DateTime?
  priority    String?
  status      String
  category    String?
  reminderAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plant {
  id                String         @id @default(uuid())
  name              String
  species           String?
  image             String?
  wateringSchedule  String?
  wateringAmount    String?
  lastWatered       DateTime?
  nextWatering      DateTime?
  fertilizeSchedule String?
  lastFertilized    DateTime?
  nextFertilizing   DateTime?
  location          String?
  lightNeeds        String?
  notes             String?
  healthStatus      String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  careLogs          PlantCareLog[]
}

model PlantCareLog {
  id        String   @id @default(uuid())
  careType  String
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plantId   String
  plant     Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
}

model Recipe {
  id           String     @id @default(uuid())
  title        String
  description  String?
  ingredients  Json
  instructions String
  prepTime     Int?
  cookTime     Int?
  servings     Int?
  imageUrl     String?
  favorited    Boolean    @default(false)
  calories     Int?
  tags         String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  mealPlans    MealPlan[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MealPlan {
  id        String   @id @default(uuid())
  date      DateTime
  mealType  String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipeId  String
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MaintenanceTask {
  id            String    @id @default(uuid())
  title         String
  description   String?
  dueDate       DateTime?
  completedDate DateTime?
  frequency     String?
  category      String?
  priority      String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WeatherLocation {
  id        String   @id @default(uuid())
  name      String
  city      String
  country   String?
  latitude  Float?
  longitude Float?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
